/* Reset básico */
*{
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: "Oswald", sans-serif;
}

a{
    text-decoration: none;
}

/* Esta regla solo se agrega si es seguro que no habrá más listas de elementos dentro de la página para estilizar */
/* ul{
    list-style: none;
} */

/* 1ra sección */
.navbar{
    display: flex;
    position: fixed;
    width: 100%;
    justify-content: space-between;
    align-items: center;
    background-color: rgb(241, 241, 241);
    padding: 10px 20px;
    color:rgb(24, 24, 24);
    font-weight: 600;
    font-style: bold;
    font-size: 30px;
}

.navbar ul{
    display: flex;
    list-style: none;
}

.navbar ul li{
    margin: 0 10px;
}

.navbar ul li a{
    color:rgb(24, 24, 24);
    text-decoration: none;
    font-weight: 400;
    font-style: normal;
    font-size: 25px;
}

/* 2da sección */
.gallery{
    display: grid;
    /* Si se aumentan los píxeles de la regla minmax y se disminuyen las filas (fr) las imágenes son más grandes */
    /* repeat específica que esa regla se repita en cada colummna de la tabla */
    grid-template-columns: repeat(auto-fit, minmax(260px, 2fr));
    gap: 40px;
    padding: 15px;
    background-color: rgb(34, 34, 34);
}

.gallery img{
    width: 100%;
    /* Aspect-ratio hace que todas imágenes sean uniformes sin especificar la altura. Sus diferentes atributos o medidas son: 1/1, 0.5, 1, 1/0.5, 16/9. Se elige la medida que más se acomode a lo que se busca personalizar  */
    aspect-ratio: 1/1;
    object-fit: cover;
    gap:20px;
    border-radius: 10px;
}

.gallery div{
    margin-top: 90px;
}

/* 3ra sección | Comprendiendo el uso de Grid*/
/* Si se quiere que las imágenes se acomoden uniformemente es necesario que grid-template-rows sea (auto) para que el espaciado no sea tan grande si se utiliza junto con display: flex */
.layout{
    display: grid;
    grid-template-columns: 200px, 1fr;
    grid-template-rows: auto;
    grid-template-areas:
    "header header"
    "sidebar main"
    "footer footer"
    ;
    height: 100vh;
    color: white;
}

.header{
    grid-area: header;
    background-color: rgb(52, 51, 51);
    padding: 20px;
    text-align: center;
}

.sidebar{
    grid-area: sidebar;
    background-color: rgb(65, 64, 64);
    padding: 20px;
}

/* Recordar que es posible agregar un display: flex a un grid-area con display: grid */
/* Los gaps van en el elemento padre */
.main{
    grid-area: main;
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    gap:15px;
    background-color: rgb(78, 78, 78);
    padding: 10px;
}

.footer{
    grid-area: footer;
    background-color: rgb(100, 100, 100);
    padding: 20px;
    text-align: center;
}

/* Clase container correspondiente al gird-area main */
/* flex: 1 1 150px se adapta al espacio disponible */
.container{
    flex: 1 1 150px;
    max-width: 200px;
    height: 200px;
    background-color: rgb(213, 212, 212);
    text-align: center;

}